/*
На пути создания приложения с изометрическим видом можно встретить много трудных задач, 
решение которых сложно найти в сети. Пример реализации ромбической изометрии на языке C#:
*/

using UnityEngine;
// для удобства создаётся структура содержащая две целые координаты
public struct PositionXY
{
    public int X;
    public int Y;
    public PositionXY(int X, int Y)
    {
        this.X = X;
        this.Y = Y;
    }
}
// и структура содержащая две вещественные координаты
public struct floatXY
{
    public float X;
    public float Y;

    public floatXY(float X, float Y)
    {
        this.X = X;
        this.Y = Y;
    }
}
public class Position {       
    private static PositionXY valueInt;
    private static floatXY valueFloat;
	// ...
// смещение реальных координат при перемещении объекта на одну клетку    public static float dx = 1.132f, dy = 0.42f;
// определение координат на поле через координаты объекта на экране
    public static floatXY XYfloat(float Cx0, float Cy0, int X, int Y)
    {
        valueFloat.X = Cx0 + dx * (X + Y);
        valueFloat.Y = Cy0 + dy * (X - Y);
        return valueFloat;
    }   
    // определение координат на экране через координаты объекта на поле
    public static PositionXY intXY(floatXY Pos0, float fX, float fY){       
        int a = 0, b = 0;
        a = Mathf.RoundToInt ((fX - Pos0.X) / dx);
        b = Mathf.RoundToInt ((fY - Pos0.Y) / dy);
        valueInt.X = ((a + b) / 2);	
        valueInt.Y = ((a - b) / 2);          
        return valueInt;
    }
}


/*
Ещё одна проблема, связанная с реализацией изометрии – это порядок отображения объектов на поле. 
Должно казаться, что объекты, находящиеся на поле ниже, ближе к игроку, то есть отображаться поверх тех объектов, 
которые на игровом поле стоят выше. Решение довольно простое. 
*/

// создаётся отдельный скрипт, который затем привязывается
// ко всем игровым объектам на поле
using UnityEngine;
public class Zindex : MonoBehaviour
{
    void Update()
    {
// координата z объекта должна зависеть от y, а можно просто их прировнять
// и Unity автоматически будет рисовать объект, который ближе по z, поверх
// других объектов
transform.position = new Vector3(transform.position.x, transform.position.y, transform.position.y);
    }
}


/*
Очень частая проблема в Unity: игровые префабы (заготовка для клонов схожих объектов) нельзя подключить в скрипт как статичный объект. 
В результате сложно передать какие-либо параметры в другой скрипт. Также приходиться переопределять не статичные методы класса, 
при использовании в нём параметров префаба. Первый способ решения данной проблемы связан с созданием дополнительной публичной и 
статичной переменной логического типа, и делать ее истинной или ложной в зависимости от текущего состояния конкретного параметра объекта. 
Так, например, переменная plant принимает параметр true, когда координаты всех ящиков на поле, совпадают с координатами почвы:
*/

// инициализация логической переменной в классе скрипта-контроллера ящика
public class CubeController : MonoBehaviour
{
    public static bool Plant = false;
    // …
    // здесь определяются координаты ящиков и почвы
    IEnumerator OffsetCoroutine()
    {	
	// ...
         // если координаты почвы совпадают с координатами ящика
if (MapScript.SoilArr.Contains(Pos) && !flagSoil)
         {
            flagSoil = true;
            MapScript.counter++;
         }
         // если ящик стоял на почве, но его сдвинули
if (!(MapScript.SoilArr.Contains(Pos)) && flagSoil)
         {
            flagSoil = false;
            MapScript.counter--;
         }
         // ...
    }
}

// класс определяющий начальные координаты объектов на игровом поле
public class MapScript : MonoBehaviour
{
    // переменные для определения, что все ящики на местах
    public static int counter;
    private int counterCube = 0;
    void Update ()
    {
	// когда количество ящиков, доставленных на почву
// равно количеству ящиков на поле, переменная принимает значение
if (counter == counterCube && counterCube != 0)
{
CubeController.Plant = true;
}
    }
    // …
}

/*
Есть второй способ решения этой проблемы – создать экземпляр класса статичного объекта внутри скрипта. Так, например:
*/

// в скрипте блочного программирования, при удалении блока
// необходимо смещать камеру влево
public class MovePanel : MonoBehaviour
{
    //...
    void Destroyed(int px, int py)
    {
    // ...
    delete:
        ControlCamera.Back(coordinate.X);
    }
    // ...
}

// для этого в скрипте, управляющем камерой
public class ControlCamera : MonoBehaviour
{
    public static GameObject empt;
    public static void Next(float x)
    {
        empt = GameObject.Find("Main Camera");
        // вызываем не статичный метод из статичного
        ControlCamera nonstat = empt.AddComponent<ControlCamera>();
        if ((x - nonstat.transform.position.x) > 3f)
        {
            while (!((x - nonstat.transform.position.x) <= 3))
	   {
nonstat.transform.position = new Vector3(nonstat.transform.position.x + 1f, nonstat.transform.position.y, nonstat.transform.position.z);
            }
        }
    }
    // ...
}


/*
Следующий фрагмент кода может пригодиться многим разработчикам игр. Поскольку в Unity при переходе с одной игровой сцены на другую, 
уничтожаются все объекты данной сцены. Без следующего кода невозможно сделать непрерывное воспроизведение музыки в игре:
*/

// создаётся скрипт, который потом привязывается
// к объекту, проигрывающему музыку
using System.Collections;
using UnityEngine;
public class DontDestroy : MonoBehaviour
{
    private AudioSource audioManager;
    public static bool flagPause = false;
    // ...
    public void Awake()
    {
         audioManager = GetComponent < AudioSource > ();
         // обозначаем в коде, что этот объект удалять нельзя
	DontDestroyOnLoad(this);
	// но при переходе на новую сцену иногда наблюдается дублирование
	// аудио-объекта, поэтому уничтожаем лишний
         if (FindObjectsOfType(GetType()).Length > 1)
         {
             Destroy(gameObject);
         }
// уничтожается последний созданный, поэтому музыка не начнется заново
    }
}
